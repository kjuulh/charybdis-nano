#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include "macros.dtsi"
#include "behaviors.dtsi"
#include "combos.dtsi"


/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 2 5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <4>;
        scale-divisor = <5>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <6>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <6>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    // ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03    04      05        06     07     08     09     10     11
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    12     13     14     15    16      17        18     19     20     21     22     23
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    24     25     26     27    28      29        30     31     32     33     34     35
    // ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
    //                         36     37     38        39     40
    //                      ╰──────┴──────┴──────╯  ╰──────┴──────╯
    // #define BASE    0
    // #define NUM     1
    // #define NAV     2
    // #define SYM     3
    // #define GAME    4
    // #define PHOTOS  5
    // #define EXTRAS  6
    // #define MOUSE   7
    // #define SLOW    8
    // #define SCROLL  9

    combos {
        compatible = "zmk,combos";

        cmp-esc {
            bindings = <&kp ESCAPE>;
            key-positions = <13 14>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp TAB         &kp Q  &kp W  &kp E       &kp R       &kp T          &kp Y         &kp U            &kp I      &kp O       &kp P          &lt 2 TILDE
&kp LEFT_SHIFT  &kp A  &kp S  &kp D       &kp F       &kp G          &kp H         &kp J            &kp K      &kp L       &kp SEMICOLON  &kp SINGLE_QUOTE
&kp LCTRL       &kp Z  &kp X  &kp C       &kp V       &kp B          &kp N         &kp M            &kp COMMA  &kp PERIOD  &kp SLASH      &lt 4 GRAVE
                              &td_cursor  &kp ESCAPE  &lt 3 SPACE    &lt 5 RETURN  &lt 1 BACKSPACE
            >;
        };

        NUM {
            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4   &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9      &kp NUMBER_0       &none
&trans  &none         &none         &none         &none          &none           &kp MINUS     &kp MINUS     &kp EQUAL     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BSLH
&none   &none         &none         &none         &kp BACKSPACE  &kp SPACE       &bootloader   &hm F1 N1     &hm F2 N2     &hm F3 N3         &hm F12 SLASH      &none
                                    &none         &none          &trans          &kp DOT       &kp N0
            >;
        };

        NAV {
            bindings = <
&none   &kp LA(Q)  &kp LA(W)  &kp LA(E)  &kp LA(R)  &kp LA(T)    &none            &none              &none       &none           &none            &trans
&trans  &kp LA(A)  &kp LA(S)  &kp LA(D)  &kp LA(F)  &kp LA(G)    &none            &kp LEFT_ARROW     &kp DOWN    &kp UP          &kp RIGHT_ARROW  &none
&none   &none      &none      &none      &none      &none        &none            &kp HOME           &kp PG_DN   &kp PG_UP       &kp END          &studio_unlock
                              &none      &none      &trans       &trans           &trans
            >;
        };

        SYM {
            bindings = <
&none   &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET    &kp AMPERSAND   &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EXCL
&trans  &none            &none        &none     &trans      &none          &td_hyphen   &kp SEMICOLON   &kp LPAR      &kp LBKT              &kp RIGHT_BRACKET      &kp PIPE
&none   &none            &none        &none     &none       &bootloader    &kp AT_SIGN  &kp UNDERSCORE  &kp LT        &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BSLH
                                      &trans    &trans      &trans         &trans       &trans
            >;
        };

        EXTRAS {
            bindings = <
&kp C_POWER      &none   &none  &none  &none  &kp C_BRIGHTNESS_INC    &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2       &bt BT_SEL 3     &out OUT_TOG     &bt BT_CLR
&kp C_SLEEP      &none   &none  &none  &none  &kp C_BRIGHTNESS_DEC    &none         &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_STOP       &kp C_NEXT       &none
&kp C_AL_COFFEE  &none   &none  &none  &none  &none                   &none         &kp K_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp PRINTSCREEN  &studio_unlock
                                &none  &none  &none                   &none         &none
            >;
        };

        MOUSE {
            bindings = <
&none    &msc MOVE_LEFT  &msc MOVE_UP    &mmv MOVE_UP    &msc MOVE_DOWN   &msc MOVE_RIGHT    &none   &none           &none      &none         &none     &trans
&kp TAB  &mkp MB4        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB5           &none   &sk LEFT_SHIFT  &sk LCTRL  &sk LEFT_ALT  &sk LCMD  &none
&none    &kp C_AC_UNDO   &kp C_AC_CUT    &kp C_AC_COPY   &kp C_AC_PASTE   &mkp MCLK          &none   &mkp LCLK       &mkp MB3   &mkp RCLK     &none     &none
                                         &trans          &trans           &trans             &trans  &trans
            >;
        };

        SLOW {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        nav {
            if-layers = <3 5>;
            then-layer = <2>;
        };
    };
};
